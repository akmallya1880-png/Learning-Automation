What kind of wait will you use: Explicit or Implicit wait and its syntax?

ðŸ”¹ Implicit Wait â€“ Definition

Implicit Wait tells WebDriver to wait for a defined time while trying to find an element before throwing NoSuchElementException. It applies globally for all elements.
driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
Explicit Wait â€“ Definition

Explicit Wait is a conditional wait that is applied to specific elements until a certain condition is met (e.g., element is visible or clickable).
WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
IWebElement element = wait.Until(
    SeleniumExtras.WaitHelpers.ExpectedConditions.ElementIsVisible(By.Id("username"))
);
###########################################################################
2. What are the methods used in driver?
| Method                              | What it Does            | Remember As     |
| ----------------------------------- | ----------------------- | --------------- |
| `driver.Navigate().GoToUrl(url)`    | Opens a website         | Go to page      |
| `driver.Title`                      | Gets page title         | Page tab name   |
| `driver.Url`                        | Gets current page URL   | Where am I now? |
| `driver.FindElement(By)`            | Finds one element       | Get one thing   |
| `driver.FindElements(By)`           | Finds multiple elements | Get many things |
| `driver.Navigate().Back()`          | Go to previous page     | Back            |
| `driver.Navigate().Forward()`       | Go to next page         | Forward         |
| `driver.Navigate().Refresh()`       | Reload page             | Refresh         |
| `driver.Manage().Window.Maximize()` | Maximize browser        | Big window      |
| `driver.Close()`                    | Close current window    | One tab close   |
| `driver.Quit()`                     | Close all windows       | Quit everything |

#########################################################################################
3.How will you handle dropdowns
using OpenQA.Selenium.Support.UI;

SelectElement dropdown = new SelectElement(driver.FindElement(By.Id("dropdownId")));
dropdown.SelectByText("Option 1");
dropdown.SelectByValue("value");
dropdown.SelectByIndex(2);
#########################################################################################
4.How will you handle frames and come out of the frame?

Switch into frame:
driver.SwitchTo().Frame("frameName");
Exit frame:
driver.SwitchTo().DefaultContent();
#########################################################################################
5. What is the return type of WebElement and WebElements?

FindElement() â†’ IWebElement
FindElements() â†’ IReadOnlyCollection<IWebElement>
#########################################################################################
6. How will you handle Alert and its types with syntax?

Syntax:
IAlert alert = driver.SwitchTo().Alert();
alert.Accept();
alert.Dismiss();
string text = alert.Text;
alert.SendKeys("Text");
Types:
Simple Alert
Confirmation Alert
Prompt Alert
#########################################################################################
7. How will you handle multiple windows?
string parent = driver.CurrentWindowHandle;
var allWindows = driver.WindowHandles;

foreach (var win in allWindows)
{
    if (win != parent)
    {
        driver.SwitchTo().Window(win);
        driver.Close();
    }
}
driver.SwitchTo().Window(parent);|
#########################################################################################
8. How do you handle Authentication popup (username & password)?
driver.Navigate().GoToUrl("https://username:password@yourURL.com");
###########################################################################
9. Screenshot syntax
ITakesScreenshot ts = (ITakesScreenshot)driver;
Screenshot screenshot = ts.GetScreenshot();
screenshot.SaveAsFile("path/to/save.png", ScreenshotImageFormat.Png);
###########################################################################
10. If click is not working, whatâ€™s the next option?
IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
js.ExecuteScript("arguments[0].click();", element);
###########################################################################
11. If JavaScript Executor is not working, what's the next option?
Actions actions = new Actions(driver);
actions.MoveToElement(element).Click().Perform();
###########################################################################
12. How do you scroll down?
IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
js.ExecuteScript("window.scrollBy(0,500);");
###########################################################################
13. What is using statement?
Namespace Import
using OpenQA.Selenium;
Auto-dispose Resource
using (IWebDriver driver = new ChromeDriver())
{
    driver.Navigate().GoToUrl("https://example.com");
}
###########################################################################
14. What kind of Exceptions do you often get?

StaleElementReferenceException

ElementClickInterceptedException

NoSuchElementException

TimeoutException
###########################################################################
15. What is try and catch?
try
{
    driver.FindElement(By.Id("btn")).Click();
}
catch (Exception e)
{
    Console.WriteLine("Error: " + e.Message);
}
###########################################################################
16. What is XPath and its types?

Absolute XPath: /html/body/div[1]/a

Relative XPath: //a[@id='link']
###########################################################################

17. What are Axes-based XPaths?

following-sibling

preceding-sibling

parent

ancestor

descendant

child

Example:

//div[@id='main']//following-sibling::p
###########################################################################

18. How do you handle Web Tables?
var rows = driver.FindElements(By.XPath("//table/tbody/tr"));
foreach (var row in rows)
{
    var cols = row.FindElements(By.TagName("td"));
    foreach (var col in cols)
    {
        Console.WriteLine(col.Text);
    }
}
###########################################################################
19. What is Serialization and Deserialization?

Serialization: Converting an object into a byte stream.

Deserialization: Converting a byte stream back into an object.

In Selenium, used in session storage or API testing with JSON.

