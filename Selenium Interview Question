What kind of wait will you use: Explicit or Implicit wait and its syntax?

üîπ Implicit Wait ‚Äì Definition

Implicit Wait tells WebDriver to wait for a defined time while trying to find an element before throwing NoSuchElementException. It applies globally for all elements.
driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);
Explicit Wait ‚Äì Definition

Explicit Wait is a conditional wait that is applied to specific elements until a certain condition is met (e.g., element is visible or clickable).
WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
IWebElement element = wait.Until(
    SeleniumExtras.WaitHelpers.ExpectedConditions.ElementIsVisible(By.Id("username"))
);
###########################################################################
2. What are the methods used in driver?
| Method                              | What it Does            | Remember As     |
| ----------------------------------- | ----------------------- | --------------- |
| `driver.Navigate().GoToUrl(url)`    | Opens a website         | Go to page      |
| `driver.Title`                      | Gets page title         | Page tab name   |
| `driver.Url`                        | Gets current page URL   | Where am I now? |
| `driver.FindElement(By)`            | Finds one element       | Get one thing   |
| `driver.FindElements(By)`           | Finds multiple elements | Get many things |
| `driver.Navigate().Back()`          | Go to previous page     | Back            |
| `driver.Navigate().Forward()`       | Go to next page         | Forward         |
| `driver.Navigate().Refresh()`       | Reload page             | Refresh         |
| `driver.Manage().Window.Maximize()` | Maximize browser        | Big window      |
| `driver.Close()`                    | Close current window    | One tab close   |
| `driver.Quit()`                     | Close all windows       | Quit everything |

#########################################################################################
3.How will you handle dropdowns
using OpenQA.Selenium.Support.UI;

SelectElement dropdown = new SelectElement(driver.FindElement(By.Id("dropdownId")));
dropdown.SelectByText("Option 1");
dropdown.SelectByValue("value");
dropdown.SelectByIndex(2);
#########################################################################################
4.How will you handle frames and come out of the frame?
‚ÄúIn Selenium, to handle elements inside an iframe, we must first switch to that frame using driver.SwitchTo().Frame(). After completing actions, we can come out using ParentFrame() or DefaultContent().‚Äù
Switch into frame:
driver.SwitchTo().Frame("frameName");
Exit frame:
driver.SwitchTo().DefaultContent();
#########################################################################################
5. What is the return type of WebElement and WebElements?
When you use a locator method like FindElement, it returns a single web element ‚Äî the first matching element on the page.
FindElement() ‚Üí IWebElement
When you use FindElements, it returns a list (collection) of web elements that match the locator.
FindElements() ‚Üí IReadOnlyCollection<IWebElement>
#########################################################################################
6. How will you handle Alert and its types with syntax?
‚ÄúIn Selenium C#, I handle alerts using driver.SwitchTo().Alert(). Depending on the alert type, I use Accept() for OK, Dismiss() for Cancel, and SendKeys() for entering text. I also use WebDriverWait to handle synchronization issues when the alert takes time to appear.‚Äù
Syntax:
IAlert alert = driver.SwitchTo().Alert();
alert.Accept();
alert.Dismiss();
string text = alert.Text;
alert.SendKeys("Text");
Types:
Simple Alert ‚Äì shows a message and has an OK button.
Confirmation Alert ‚Äì shows a message with OK and Cancel buttons.
Prompt Alert ‚Äì accepts text input along with OK and Cancel button
#########################################################################################
7. How will you handle multiple windows?
‚ÄúIn real-time web applications, sometimes clicking on a link or button opens a new tab or window ‚Äî for example, when we click on ‚ÄòPrivacy Policy‚Äô or ‚ÄòTerms & Conditions‚Äô.
In Selenium, by default, the driver always works with the main window, so to handle multiple windows, we need to switch control from the parent to the child window and back.‚Äù
string parent = driver.CurrentWindowHandle;
var allWindows = driver.WindowHandles;

foreach (var win in allWindows)
{
    if (win != parent)
    {
        driver.SwitchTo().Window(win);
        driver.Close();
    }
}
driver.SwitchTo().Window(parent);|
#########################################################################################
8. How do you handle Authentication popup (username & password)?
In real projects, I‚Äôve noticed that authentication popups can vary across test environments ‚Äî so I usually discuss with the dev/infra team whether we can switch to token-based or cookie-based login in automation to make the scripts more stable.‚Äù
driver.Navigate().GoToUrl("https://username:password@yourURL.com");
###########################################################################
9. Screenshot syntax
‚ÄúIn my framework, I often capture screenshots for debugging and reporting ‚Äî especially when a test case fails.
Selenium provides the ITakesScreenshot interface to capture screenshots.‚Äù
Syntax:
ITakesScreenshot ts = (ITakesScreenshot)driver;
Screenshot screenshot = ts.GetScreenshot();
screenshot.SaveAsFile("C:\\Screenshots\\Error.png", ScreenshotImageFormat.Png);
Explanation:
ITakesScreenshot is an interface implemented by WebDriver.
GetScreenshot() captures the current browser window.
SaveAsFile() saves the image to a specified location.
In my project:
‚ÄúI‚Äôve implemented this inside a reusable utility method that dynamically names the screenshot with the test name and timestamp, and integrates with NUnit‚Äôs TearDown or Extent Reports for better traceability.‚Äù
‚ÄúI also attach these screenshots automatically to my test reports so that any test failure instantly shows the browser state at the point of error.‚Äù
###########################################################################
10. If click is not working, what‚Äôs the next option?
In my automation framework, I usually create a custom click utility method that first tries a normal click, and if it fails, automatically retries with a JavaScript click. This makes the scripts more stable and reduces flaky test failures.‚Äù
IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
js.ExecuteScript("arguments[0].click();", element);
###########################################################################
11. If JavaScript Executor is not working, what's the next option?
In my framework, I always design actions like click, enter text, or scroll inside a robust utility layer that tries multiple approaches ‚Äî normal click ‚Üí JS click ‚Üí Actions ‚Üí keyboard simulation.
This ensures test stability and reduces flaky failures across environments.‚Äù
Actions actions = new Actions(driver);
actions.MoveToElement(element).Click().Perform();
###########################################################################
12. How do you scroll down?
‚ÄúI‚Äôve created a ScrollToElement() and ScrollByPixel() utility method using JavaScriptExecutor, so testers can easily reuse them.
This makes scripts cleaner and more stable, especially when elements are not immediately visible in the viewport.‚Äù
IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
js.ExecuteScript("window.scrollBy(0,500);");
###########################################################################
13. What is using statement?
In C#, using statements import required libraries or namespaces, so I can directly access Selenium classes like IWebDriver and ChromeDriver. Namespaces organize my classes and prevent naming conflicts, making my code modular and maintainable."
###########################################################################
14. What kind of Exceptions do you often get?

StaleElementReferenceException ‚Üí element is outdated after page reload/DOM change.

ElementClickInterceptedException ‚Üí another element is blocking the click.
*************************************************************************
NoSuchElementException ‚Üí locator is wrong or element not yet available.
"NoSuchElementException in Selenium occurs when the WebDriver cannot find the web element on the page. This usually happens due to two main reasons:
Incorrect locator: The locator (ID, XPath, CSS selector, etc.) used in the script is wrong, outdated, or doesn‚Äôt match the element on the current page.
Element not yet available: The element exists in the DOM but is not yet loaded or visible when Selenium tries to access it, often due to page load delays or dynamic content.
To handle this, I follow these best practices:
Validate locators carefully using browser developer tools.
Use explicit waits (WebDriverWait) to wait until the element is present, visible, or clickable.
Avoid relying solely on implicit waits for dynamic elements.
********************************************************

TimeoutException ‚Üí wait condition not met in given time.
###########################################################################
15. What is try and catch?
try ‚Üí "Let me try this risky action."

catch ‚Üí "If something goes wrong (error/exception), I will catch it and handle it instead of crashing."
try
{
    // Risky action: Finding and clicking a button
    IWebElement button = driver.FindElement(By.Id("submit"));
    button.Click();
}
catch (NoSuchElementException ex)
{
    // Handling error: If button not found
    Console.WriteLine("Submit button not found! " + ex.Message);
}
###########################################################################
16. What is XPath and its types?
‚ÄúXPath is used to locate elements in the DOM; types include absolute XPath (full path) and relative XPath (dynamic, preferred).‚Äù

Absolute XPath: /html/body/div[1]/a

Relative XPath: //a[@id='link']
###########################################################################

17. What are Axes-based XPaths?
‚ÄúAxes-based XPath navigates the DOM relative to an element

following-sibling

preceding-sibling

parent

ancestor

descendant

child

Example:

//div[@id='main']//following-sibling::p
Sibling ‚Üí Same level (before/after).

Parent/Ancestor ‚Üí Move upward.

Child/Descendant ‚Üí Move downward
###########################################################################

18. How do you handle Web Tables?
‚ÄúI handle web tables by iterating through rows and cells using dynamic XPath or reusable utility methods to extract or validate data.‚Äù
var rows = driver.FindElements(By.XPath("//table/tbody/tr"));
foreach (var row in rows)
{
    var cols = row.FindElements(By.TagName("td"));
    foreach (var col in cols)
    {
        Console.WriteLine(col.Text);
    }
}
###########################################################################
19. What is Serialization and Deserialization?
‚ÄúSerialization converts a C# object into JSON/XML for storage or transfer, and deserialization converts it back into an object.‚Äù

Serialization: Converting an object into a byte stream.

Deserialization: Converting a byte stream back into an object.

In Selenium, used in session storage or API testing with JSON.

