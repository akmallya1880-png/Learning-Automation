1) To hard code configuration:
Right click on the project->New->Application  Configuration File-> Save as App Config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <appSettings>
        <add key="browser" value="Chrome"/>// this should be added
    </appSettings>
</configuration>
##################################################################################################################
2)Page Object 
//Login page- All the objects of the login page will be saved in this class file
A class file is responsible to  store all the locators belong to that page
//Document request-All the objects of the document request will be saved in this class file
We have to create a new folder for Page Object
 //driver.FindElement(By.Id("username"))-Web Element
 //By.Id("username")-Locator
Page Object Pattern 
Page Factory is necessary in the class file
Add Manage NuGet Packages->Browser->Selenium Extras PageObjects,Selenium Extras PageObjects.Core
//driver.FindElement(By.Id("username")) can be written as [FindsBy(How = How.Id, Using = "username")]
//private IWebElement username; can be assigned to a variable
        private IWebDriver driver;

        public LoginPage(IWebDriver driver)
        {

            this.driver = driver;
            PageFactory.InitElements(driver, this);//This helps to register the driver
//InitElement methods helps for locators

        }
We should declare object as private it avoid reinitialisation 
 [FindsBy(How = How.Id, Using = "username")]
 private IWebElement username;
We should call using methods 
  public IWebElement getUserName()

  {
      return username;
  }
This is concept of encapsulation.
##################################################################################################################
Nunit Annotations/Attributes:
3) Global Data Declaration:We should declare as [TestCase("username" "password")]
Then declare in the method of the [Test] with arguments of datatypes
Each testcase will run separately when we declare twice
 [TestCase("username" "password")]-This will run first 
 [TestCase("username" "password")]-This will run second

4)To wrap 20+ testcases we should create a method and then call it using TestCaseSource
TestCaseSource("AddTestDataConfig")- TestCaseSource accepts method name as annotations
    public static IEnumerable<TestCaseData> AddTestDataConfig()

    {
yield return new TestCaseData("username","password");
yield return new TestCaseData("username","password");
yield return new TestCaseData("username","password");

      }

yield is used in before multiple return so that it will wait
Since there is multiple return we should IEumerable<TestCaseData>
5)Json files are used to fetch datas in the automation
To create a json file->Add->TextFile
